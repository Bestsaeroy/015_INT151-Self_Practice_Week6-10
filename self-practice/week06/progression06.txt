WEEK06 - Thanakorn Chitsue 015

1. First-class & Higher-order Functions
ในหัวข้อนี้มุ่งเน้นการมอง “ฟังก์ชันเป็นข้อมูล” (First-class citizen) ซึ่งสามารถส่งเป็นอาร์กิวเมนต์ให้ฟังก์ชันอื่น หรือถูกส่งกลับได้ ฟังก์ชัน applyDiscount ถูกออกแบบให้รับฟังก์ชันส่วนลดจากภายนอก (discountFn) 
ทำให้สามารถเปลี่ยนตรรกะการลดราคาได้อย่างยืดหยุ่นโดยไม่ต้องแก้โค้ดภายใน เป็นตัวอย่างของ Higher-order Function ที่ช่วยให้โค้ด reusable และปรับเปลี่ยนพฤติกรรมได้ตามต้องการ

2. Declarative (filter / map / reduce)
หัวข้อนี้ฝึกการเขียนโปรแกรมเชิง declarative ผ่านฟังก์ชัน getTotalHighScores() โดยใช้ filter, map และ reduce แทนการใช้ loop แบบ imperative 
แนวคิดสำคัญคือการ “บอกว่า ต้องการทำอะไร ไม่ใช่บอกว่า ต้องทำอย่างไร” ซึ่งช่วยให้โค้ดอ่านง่าย, กระชับ และลด error จากตัวแปรกลางหรือโครงสร้างควบคุมที่ซับซ้อน

3. Immutability
ในฟังก์ชัน addPlayer() เน้นการจัดการข้อมูลแบบไม่เปลี่ยนค่าเดิม (immutable state) โดยใช้เทคนิค spread operator [...] เพื่อสร้าง array ใหม่แทนการแก้ไข array เก่า 
แนวคิดนี้ช่วยลดปัญหาจาก shared state, ทำให้โค้ด predictable และทำงานร่วมกับ pure function ได้ดี

4. Pure Function
หัวข้อนี้ใช้ฟังก์ชัน calculateBonus() เพื่อเน้นความสำคัญของการสร้างฟังก์ชันที่ผลลัพธ์ขึ้นกับ input เท่านั้น และไม่มี side effects เช่น การแก้ตัวแปรภายนอกหรือการใช้ randomness 
ข้อดีคือฟังก์ชันทดสอบได้ง่าย, คาดเดาผลลัพธ์ได้ และสามารถนำไป compose กับฟังก์ชันอื่น ๆ ได้อย่างมีประสิทธิภาพ

5. Impure Function
ฟังก์ชัน randomBonus() แสดงพฤติกรรมตรงข้ามกับ Pure Function เพราะให้ผลลัพธ์ไม่แน่นอน แม้จะใช้ input เดิม แนวคิดนี้ช่วยให้เข้าใจข้อจำกัดของ Impure Function 
ที่ทำให้โค้ดไม่ predictable และ debug ยากกว่า จึงเป็นเหตุผลว่าทำไม Functional Programming จึงพยายามลดหรือควบคุม side effects

6. Function Composition
หัวข้อนี้สาธิตการรวมฟังก์ชันเล็ก ๆ อย่าง add5 และ mul3 ให้ทำงานต่อกันผ่านฟังก์ชัน compose() เพื่อสร้าง pipeline ของการประมวลผล 
แนวคิดสำคัญคือ “แบ่งปัญหาเป็นฟังก์ชันเล็กและประกอบกลับ” ทำให้โค้ด reusable, maintain ง่าย และรองรับการขยาย logic โดยไม่แก้โครงสร้างหลัก

7. Closures & Scope
หัวข้อสุดท้ายใช้ฟังก์ชัน createCounter() เพื่ออธิบายการใช้ Closure ในการเก็บ state ภายใน scope ของฟังก์ชัน โดยไม่เปิดเผยให้เข้าถึงจากภายนอกโดยตรง 
ทำให้ตัวแปรเป็น private และควบคุมการเปลี่ยนค่าได้อย่างปลอดภัย เหมาะกับการจัดการ state แบบจำกัดขอบเขต ช่วยลด side effects และเพิ่มความปลอดภัยของข้อมูล